This is a pathing problem, except instead of trying to find the shortest path, which involves updating a variable with the shortest path value to compare to, usually while performing something like Djikstra's algorithm, we're trying to find all unique paths that achieve a constant total. There are a couple different ways I see to go about this with full coverage: iterate through all path lengths (n-1 to n^2), or iterate through each node, and then check all paths that have that node as a starting path. With a directed graph, none of these paths will duplicate each other (if we make sure to not create any cycles).

The latter method offers us some potential optimization: if we land on a node that yields a path p with total path value > n^2, we know any further paths that have p as a sub-path are ineligible. Additionally, if we land on a node that yields a path p with total value = n^2, we can switch our recursive logic to only look for links with a value of 0. This will decrease the number of operations we attempt during our pathfinding recursion, and will also cut off any other unnecessary pathfinding.

My combinatorics knowledge could once let me calculate the number of unique paths, but we're looking at something over 2^n paths for an n by n grid, where n > 1. For computer science people, we're in NP space. For developers, this is going to scale terribly.

Since it is unclear whether the random numbers can repeat, I can assume they can. So we can have a 3x3 grid of 3,3,3; 3,3,3; 3,3,3. In this case, nodes must be given a position as well as a value.

We'll treat the grid as a directed graph; this will allow us to cover all possible combinations without duplication

So here's the general approach: treat grid as directed graph starting in upper-left, depth first search, with some optimizations.

Blackjack logic: if it's less than n-squared, keep going. If it is equal, arrange nodes in ascending order, check for prexisitng value in list, insert if it isn't.  If it is greater than, move on to next one.


Step 1: Create node data structure
Step 2: Create graph data structure
Step 3: Create function to generate n by n grid with the appropriate parameters
Step 4: Create depth-first search style function to discover paths
Step 5: Create display for these grids

Algorithm approach:

- Start at initial vertex (we'll use upper-left node as the initial node).
- DFS through nodes until we hit or exceed n x n (for n=3, the value here is 9). If we hit, store the relevant sequence in our return array. Also, if we hit, recurse through adjacent nodes with value of 0, adding these as valid sequences.
- Once we have completed all sequences with an initial vertex, recurse through DFS for all child nodes of the intial vertex.
- When we have a node with no child nodes, return the array of valid sequences.